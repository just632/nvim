{"properties":{"$generated-end":{},"rust-analyzer.diagnostics.useRustcErrorCode":{"default":false,"type":"boolean","markdownDescription":"Whether to use the rustc error code."},"rust-analyzer.discoverProjectCommand":{"markdownDescription":"Sets the command that rust-analyzer uses to generate `rust-project.json` files. This command should only be used\n if a build system like Buck or Bazel is also in use. The command must accept files as arguments and return \n a rust-project.json over stdout.","default":null,"type":["null","array"],"items":{"type":"string"}},"rust-analyzer.showUnlinkedFileNotification":{"default":true,"type":"boolean","markdownDescription":"Whether to show a notification for unlinked files asking the user to add the corresponding Cargo.toml to the linked projects setting."},"rust-analyzer.showDependenciesExplorer":{"default":true,"type":"boolean","markdownDescription":"Whether to show the dependencies view."},"$generated-start":{},"rust-analyzer.assist.emitMustUse":{"default":false,"type":"boolean","markdownDescription":"Whether to insert #[must_use] when generating `as_` methods\nfor enum variants."},"rust-analyzer.assist.expressionFillDefault":{"enum":["todo","default"],"enumDescriptions":["Fill missing expressions with the `todo` macro","Fill missing expressions with reasonable defaults, `new` or `default` constructors."],"default":"todo","type":"string","markdownDescription":"Placeholder expression to use for missing expressions in assists."},"rust-analyzer.cachePriming.enable":{"default":true,"type":"boolean","markdownDescription":"Warm up caches on project load."},"rust-analyzer.cachePriming.numThreads":{"minimum":0,"maximum":255,"markdownDescription":"How many worker threads to handle priming caches. The default `0` means to pick automatically.","type":"number","default":0},"rust-analyzer.cargo.autoreload":{"default":true,"type":"boolean","markdownDescription":"Automatically refresh project info via `cargo metadata` on\n`Cargo.toml` or `.cargo\/config.toml` changes."},"rust-analyzer.cargo.buildScripts.enable":{"default":true,"type":"boolean","markdownDescription":"Run build scripts (`build.rs`) for more precise code analysis."},"rust-analyzer.cargo.buildScripts.invocationLocation":{"enum":["workspace","root"],"enumDescriptions":["The command will be executed in the corresponding workspace root.","The command will be executed in the project root."],"default":"workspace","type":"string","markdownDescription":"Specifies the working directory for running build scripts.\n- \"workspace\": run build scripts for a workspace in the workspace's root directory.\n    This is incompatible with `#rust-analyzer.cargo.buildScripts.invocationStrategy#` set to `once`.\n- \"root\": run build scripts in the project's root directory.\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\nis set."},"rust-analyzer.cargo.buildScripts.invocationStrategy":{"enum":["per_workspace","once"],"enumDescriptions":["The command will be executed for each workspace.","The command will be executed once."],"default":"per_workspace","type":"string","markdownDescription":"Specifies the invocation strategy to use when running the build scripts command.\nIf `per_workspace` is set, the command will be executed for each workspace.\nIf `once` is set, the command will be executed once.\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\nis set."},"rust-analyzer.cargo.buildScripts.overrideCommand":{"markdownDescription":"Override the command rust-analyzer uses to run build scripts and\nbuild procedural macros. The command is required to output json\nand should therefore include `--message-format=json` or a similar\noption.\n\nBy default, a cargo invocation will be constructed for the configured\ntargets and features, with the following base command line:\n\n```bash\ncargo check --quiet --workspace --message-format=json --all-targets\n```\n.","default":null,"type":["null","array"],"items":{"type":"string"}},"rust-analyzer.cargo.buildScripts.useRustcWrapper":{"default":true,"type":"boolean","markdownDescription":"Use `RUSTC_WRAPPER=rust-analyzer` when running build scripts to\navoid checking unnecessary things."},"rust-analyzer.cargo.cfgs":{"default":{},"type":"object","markdownDescription":"List of cfg options to enable with the given values."},"rust-analyzer.hover.links.enable":{"default":true,"type":"boolean","markdownDescription":"Use markdown syntax for links on hover."},"rust-analyzer.cargo.extraArgs":{"markdownDescription":"Extra arguments that are passed to every cargo invocation.","default":[],"type":"array","items":{"type":"string"}},"rust-analyzer.hover.memoryLayout.alignment":{"anyOf":[{"type":"null"},{"enum":["both","decimal","hexadecimal"],"type":"string","enumDescriptions":["Render as 12 (0xC)","Render as 12","Render as 0xC"]}],"default":"hexadecimal","markdownDescription":"How to render the align information in a memory layout hover."},"rust-analyzer.cargo.extraEnv":{"default":{},"type":"object","markdownDescription":"Extra environment variables that will be set when running cargo, rustc\nor other commands within the workspace. Useful for setting RUSTFLAGS."},"rust-analyzer.cargo.features":{"anyOf":[{"enum":["all"],"type":"string","enumDescriptions":["Pass `--all-features` to cargo"]},{"type":"array","items":{"type":"string"}}],"default":[],"markdownDescription":"List of features to activate.\n\nSet this to `\"all\"` to pass `--all-features` to cargo."},"rust-analyzer.cargo.noDefaultFeatures":{"default":false,"type":"boolean","markdownDescription":"Whether to pass `--no-default-features` to cargo."},"rust-analyzer.hover.memoryLayout.enable":{"default":true,"type":"boolean","markdownDescription":"Whether to show memory layout data on hover."},"rust-analyzer.hover.memoryLayout.niches":{"default":false,"type":["null","boolean"],"markdownDescription":"How to render the niche information in a memory layout hover."},"rust-analyzer.cargo.sysrootSrc":{"default":null,"type":["null","string"],"markdownDescription":"Relative path to the sysroot library sources. If left unset, this will default to\n`{cargo.sysroot}\/lib\/rustlib\/src\/rust\/library`.\n\nThis option does not take effect until rust-analyzer is restarted."},"rust-analyzer.hover.memoryLayout.offset":{"anyOf":[{"type":"null"},{"enum":["both","decimal","hexadecimal"],"type":"string","enumDescriptions":["Render as 12 (0xC)","Render as 12","Render as 0xC"]}],"default":"hexadecimal","markdownDescription":"How to render the offset information in a memory layout hover."},"rust-analyzer.cargo.target":{"default":null,"type":["null","string"],"markdownDescription":"Compilation target override (target triple)."},"rust-analyzer.hover.memoryLayout.size":{"anyOf":[{"type":"null"},{"enum":["both","decimal","hexadecimal"],"type":"string","enumDescriptions":["Render as 12 (0xC)","Render as 12","Render as 0xC"]}],"default":"both","markdownDescription":"How to render the size information in a memory layout hover."},"rust-analyzer.cargo.unsetTest":{"markdownDescription":"Unsets the implicit `#[cfg(test)]` for the specified crates.","default":["core"],"type":"array","items":{"type":"string"}},"rust-analyzer.imports.granularity.enforce":{"default":false,"type":"boolean","markdownDescription":"Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file."},"rust-analyzer.imports.granularity.group":{"enum":["preserve","crate","module","item"],"enumDescriptions":["Do not change the granularity of any imports and preserve the original structure written by the developer.","Merge imports from the same crate into a single use statement. Conversely, imports from different crates are split into separate statements.","Merge imports from the same module into a single use statement. Conversely, imports from different modules are split into separate statements.","Flatten imports so that each has its own use statement."],"default":"crate","type":"string","markdownDescription":"How imports should be grouped into use statements."},"rust-analyzer.imports.group.enable":{"default":true,"type":"boolean","markdownDescription":"Group inserted imports by the [following order](https:\/\/rust-analyzer.github.io\/manual.html#auto-import). Groups are separated by newlines."},"rust-analyzer.imports.merge.glob":{"default":true,"type":"boolean","markdownDescription":"Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`."},"rust-analyzer.imports.prefer.no.std":{"default":false,"type":"boolean","markdownDescription":"Prefer to unconditionally use imports of the core and alloc crate, over the std crate."},"rust-analyzer.imports.prefix":{"enum":["plain","self","crate"],"enumDescriptions":["Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item.","Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item. Prefixes `self` in front of the path if it starts with a module.","Force import paths to be absolute by always starting them with `crate` or the extern crate name they come from."],"default":"plain","type":"string","markdownDescription":"The path structure for newly inserted paths to use."},"rust-analyzer.inlayHints.bindingModeHints.enable":{"default":false,"type":"boolean","markdownDescription":"Whether to show inlay type hints for binding modes."},"rust-analyzer.inlayHints.chainingHints.enable":{"default":true,"type":"boolean","markdownDescription":"Whether to show inlay type hints for method chains."},"rust-analyzer.inlayHints.closingBraceHints.enable":{"default":true,"type":"boolean","markdownDescription":"Whether to show inlay hints after a closing `}` to indicate what item it belongs to."},"rust-analyzer.inlayHints.closingBraceHints.minLines":{"markdownDescription":"Minimum number of lines required before the `}` until the hint is shown (set to 0 or 1\nto always show them).","default":25,"type":"integer","minimum":0},"rust-analyzer.inlayHints.closureCaptureHints.enable":{"default":false,"type":"boolean","markdownDescription":"Whether to show inlay hints for closure captures."},"rust-analyzer.inlayHints.closureReturnTypeHints.enable":{"enum":["always","never","with_block"],"enumDescriptions":["Always show type hints for return types of closures.","Never show type hints for return types of closures.","Only show type hints for return types of closures with blocks."],"default":"never","type":"string","markdownDescription":"Whether to show inlay type hints for return types of closures."},"rust-analyzer.inlayHints.closureStyle":{"enum":["impl_fn","rust_analyzer","with_id","hide"],"enumDescriptions":["`impl_fn`: `impl FnMut(i32, u64) -> i8`","`rust_analyzer`: `|i32, u64| -> i8`","`with_id`: `{closure#14352}`, where that id is the unique number of the closure in r-a internals","`hide`: Shows `...` for every closure type"],"default":"impl_fn","type":"string","markdownDescription":"Closure notation in type and chaining inlay hints."},"rust-analyzer.cargoRunner":{"default":null,"type":["null","string"],"description":"Custom cargo runner extension ID."},"rust-analyzer.runnables.extraEnv":{"anyOf":[{"type":"null"},{"type":"array","items":{"type":"object","properties":{"platform":{"default":null,"type":["null","string","array"],"markdownDescription":"Platform(s) filter like \"win32\" or [\"linux\", \"win32\"]. See [process.platform](https:\/\/nodejs.org\/api\/process.html#processplatform) values."},"env":{"type":"object","description":"Variables in form of { \"key\": \"value\"}"},"mask":{"type":"string","description":"Runnable name mask"}}}},{"type":"object","description":"Variables in form of { \"key\": \"value\"}"}],"default":null,"markdownDescription":"Environment variables passed to the runnable launched using `Test` or `Debug` lens or `rust-analyzer.run` command."},"rust-analyzer.inlayHints.discriminantHints.enable":{"enum":["always","never","fieldless"],"enumDescriptions":["Always show all discriminant hints.","Never show discriminant hints.","Only show discriminant hints on fieldless enum variants."],"default":"never","type":"string","markdownDescription":"Whether to show enum variant discriminant hints."},"rust-analyzer.runnables.problemMatcher":{"markdownDescription":"Problem matchers to use for `rust-analyzer.run` command, eg `[\"$rustc\", \"$rust-panic\"]`.","default":["$rustc"],"type":"array","items":{"type":"string"}},"rust-analyzer.checkOnSave":{"default":true,"type":"boolean","markdownDescription":"Run the check command for diagnostics on save."},"rust-analyzer.server.path":{"markdownDescription":"Path to rust-analyzer executable (points to bundled binary by default).","scope":"machine-overridable","type":["null","string"],"default":null},"rust-analyzer.check.allTargets":{"default":true,"type":"boolean","markdownDescription":"Check all targets and tests (`--all-targets`)."},"rust-analyzer.server.extraEnv":{"markdownDescription":"Extra environment variables that will be passed to the rust-analyzer executable. Useful for passing e.g. `RA_LOG` for debugging.","default":null,"type":["null","object"],"additionalProperties":{"type":["string","number"]}},"rust-analyzer.check.extraArgs":{"markdownDescription":"Extra arguments for `cargo check`.","default":[],"type":"array","items":{"type":"string"}},"rust-analyzer.trace.server":{"scope":"window","description":"Trace requests to the rust-analyzer (this is usually overly verbose and not recommended for regular users).","default":"off","enumDescriptions":["No traces","Error only","Full log"],"type":"string","enum":["off","messages","verbose"]},"rust-analyzer.check.extraEnv":{"default":{},"type":"object","markdownDescription":"Extra environment variables that will be set when running `cargo check`.\nExtends `#rust-analyzer.cargo.extraEnv#`."},"rust-analyzer.check.features":{"anyOf":[{"enum":["all"],"type":"string","enumDescriptions":["Pass `--all-features` to cargo"]},{"type":"array","items":{"type":"string"}},{"type":"null"}],"default":null,"markdownDescription":"List of features to activate. Defaults to\n`#rust-analyzer.cargo.features#`.\n\nSet to `\"all\"` to pass `--all-features` to Cargo."},"rust-analyzer.check.ignore":{"items":{"type":"string"},"uniqueItems":true,"markdownDescription":"List of `cargo check` (or other command specified in `check.command`) diagnostics to ignore.\n\nFor example for `cargo check`: `dead_code`, `unused_imports`, `unused_variables`,...","type":"array","default":[]},"rust-analyzer.trace.extension":{"default":false,"type":"boolean","description":"Enable logging of VS Code extensions itself."},"rust-analyzer.inlayHints.lifetimeElisionHints.enable":{"enum":["always","never","skip_trivial"],"enumDescriptions":["Always show lifetime elision hints.","Never show lifetime elision hints.","Only show lifetime elision hints if a return type is involved."],"default":"never","type":"string","markdownDescription":"Whether to show inlay type hints for elided lifetimes in function signatures."},"rust-analyzer.debug.engine":{"markdownEnumDescriptions":["First try to use [CodeLLDB](https:\/\/marketplace.visualstudio.com\/items?itemName=vadimcn.vscode-lldb), if it's not installed try to use [MS C++ tools](https:\/\/marketplace.visualstudio.com\/items?itemName=ms-vscode.cpptools).","Use [CodeLLDB](https:\/\/marketplace.visualstudio.com\/items?itemName=vadimcn.vscode-lldb)","Use [MS C++ tools](https:\/\/marketplace.visualstudio.com\/items?itemName=ms-vscode.cpptools)"],"enum":["auto","vadimcn.vscode-lldb","ms-vscode.cpptools"],"description":"Preferred debug engine.","default":"auto","type":"string"},"rust-analyzer.check.invocationStrategy":{"enum":["per_workspace","once"],"enumDescriptions":["The command will be executed for each workspace.","The command will be executed once."],"default":"per_workspace","type":"string","markdownDescription":"Specifies the invocation strategy to use when running the check command.\nIf `per_workspace` is set, the command will be executed for each workspace.\nIf `once` is set, the command will be executed once.\nThis config only has an effect when `#rust-analyzer.cargo.check.overrideCommand#`\nis set."},"rust-analyzer.check.noDefaultFeatures":{"default":null,"type":["null","boolean"],"markdownDescription":"Whether to pass `--no-default-features` to Cargo. Defaults to\n`#rust-analyzer.cargo.noDefaultFeatures#`."},"rust-analyzer.inlayHints.lifetimeElisionHints.useParameterNames":{"default":false,"type":"boolean","markdownDescription":"Whether to prefer using parameter names as the name for elided lifetime hints if possible."},"rust-analyzer.check.overrideCommand":{"markdownDescription":"Override the command rust-analyzer uses instead of `cargo check` for\ndiagnostics on save. The command is required to output json and\nshould therefore include `--message-format=json` or a similar option\n(if your client supports the `colorDiagnosticOutput` experimental\ncapability, you can use `--message-format=json-diagnostic-rendered-ansi`).\n\nIf you're changing this because you're using some tool wrapping\nCargo, you might also want to change\n`#rust-analyzer.cargo.buildScripts.overrideCommand#`.\n\nIf there are multiple linked projects, this command is invoked for\neach of them, with the working directory being the project root\n(i.e., the folder containing the `Cargo.toml`).\n\nAn example command would be:\n\n```bash\ncargo check --workspace --message-format=json --all-targets\n```\n.","default":null,"type":["null","array"],"items":{"type":"string"}},"rust-analyzer.inlayHints.maxLength":{"markdownDescription":"Maximum length for inlay hints. Set to null to have an unlimited length.","default":25,"type":["null","integer"],"minimum":0},"rust-analyzer.debug.sourceFileMap":{"const":"auto","default":{"\/rustc\/<id>":"${env:USERPROFILE}\/.rustup\/toolchains\/<toolchain-id>\/lib\/rustlib\/src\/rust"},"type":["object","string"],"description":"Optional source file mappings passed to the debug engine."},"rust-analyzer.inlayHints.parameterHints.enable":{"default":true,"type":"boolean","markdownDescription":"Whether to show function parameter name inlay hints at the call\nsite."},"rust-analyzer.completion.autoimport.enable":{"default":true,"type":"boolean","markdownDescription":"Toggles the additional completions that automatically add imports when completed.\nNote that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled."},"rust-analyzer.inlayHints.reborrowHints.enable":{"enum":["always","never","mutable"],"enumDescriptions":["Always show reborrow hints.","Never show reborrow hints.","Only show mutable reborrow hints."],"default":"never","type":"string","markdownDescription":"Whether to show inlay hints for compiler inserted reborrows.\nThis setting is deprecated in favor of #rust-analyzer.inlayHints.expressionAdjustmentHints.enable#."},"rust-analyzer.debug.openDebugPane":{"markdownDescription":"Whether to open up the `Debug Panel` on debugging start.","type":"boolean","default":false},"rust-analyzer.debug.engineSettings":{"default":{},"type":"object","markdownDescription":"Optional settings passed to the debug engine. Example: `{ \"lldb\": { \"terminal\":\"external\"} }`"},"rust-analyzer.restartServerOnConfigChange":{"default":false,"type":"boolean","markdownDescription":"Whether to restart the server automatically when certain settings that require a restart are changed."},"rust-analyzer.inlayHints.renderColons":{"default":true,"type":"boolean","markdownDescription":"Whether to render leading colons for type hints, and trailing colons for parameter hints."},"rust-analyzer.typing.continueCommentsOnNewline":{"default":true,"type":"boolean","markdownDescription":"Whether to prefix newlines after comments with the corresponding comment prefix."},"rust-analyzer.inlayHints.typeHints.enable":{"default":true,"type":"boolean","markdownDescription":"Whether to show inlay type hints for variables."},"rust-analyzer.diagnostics.previewRustcOutput":{"default":false,"type":"boolean","markdownDescription":"Whether to show the main part of the rendered rustc output of a diagnostic message."},"rust-analyzer.inlayHints.typeHints.hideClosureInitialization":{"default":false,"type":"boolean","markdownDescription":"Whether to hide inlay type hints for `let` statements that initialize to a closure.\nOnly applies to closures with blocks, same as `#rust-analyzer.inlayHints.closureReturnTypeHints.enable#`."},"rust-analyzer.references.excludeImports":{"default":false,"type":"boolean","markdownDescription":"Exclude imports from find-all-references."},"rust-analyzer.inlayHints.typeHints.hideNamedConstructor":{"default":false,"type":"boolean","markdownDescription":"Whether to hide inlay type hints for constructors."},"rust-analyzer.completion.postfix.enable":{"default":true,"type":"boolean","markdownDescription":"Whether to show postfix snippets like `dbg`, `if`, `not`, etc."},"rust-analyzer.interpret.tests":{"default":false,"type":"boolean","markdownDescription":"Enables the experimental support for interpreting tests."},"rust-analyzer.completion.privateEditable.enable":{"default":false,"type":"boolean","markdownDescription":"Enables completions of private items and fields that are defined in the current workspace even if they are not visible at the current position."},"rust-analyzer.joinLines.joinAssignments":{"default":true,"type":"boolean","markdownDescription":"Join lines merges consecutive declaration and initialization of an assignment."},"rust-analyzer.completion.snippets.custom":{"default":{"Box::pin":{"scope":"expr","description":"Put the expression into a pinned `Box`","requires":"std::boxed::Box","body":"Box::pin(${receiver})","postfix":"pinbox"},"Arc::new":{"scope":"expr","description":"Put the expression into an `Arc`","requires":"std::sync::Arc","body":"Arc::new(${receiver})","postfix":"arc"},"Err":{"description":"Wrap the expression in a `Result::Err`","scope":"expr","body":"Err(${receiver})","postfix":"err"},"Some":{"description":"Wrap the expression in an `Option::Some`","scope":"expr","body":"Some(${receiver})","postfix":"some"},"Rc::new":{"scope":"expr","description":"Put the expression into an `Rc`","requires":"std::rc::Rc","body":"Rc::new(${receiver})","postfix":"rc"},"Ok":{"description":"Wrap the expression in a `Result::Ok`","scope":"expr","body":"Ok(${receiver})","postfix":"ok"}},"type":"object","markdownDescription":"Custom completion snippets."},"rust-analyzer.joinLines.joinElseIf":{"default":true,"type":"boolean","markdownDescription":"Join lines inserts else between consecutive ifs."},"rust-analyzer.rustfmt.extraArgs":{"markdownDescription":"Additional arguments to `rustfmt`.","default":[],"type":"array","items":{"type":"string"}},"rust-analyzer.joinLines.removeTrailingComma":{"default":true,"type":"boolean","markdownDescription":"Join lines removes trailing commas."},"rust-analyzer.rustfmt.overrideCommand":{"markdownDescription":"Advanced option, fully override the command rust-analyzer uses for\nformatting. This should be the equivalent of `rustfmt` here, and\nnot that of `cargo fmt`. The file contents will be passed on the\nstandard input and the formatted result will be read from the\nstandard output.","default":null,"type":["null","array"],"items":{"type":"string"}},"rust-analyzer.joinLines.unwrapTrivialBlock":{"default":true,"type":"boolean","markdownDescription":"Join lines unwraps trivial blocks."},"rust-analyzer.rustfmt.rangeFormatting.enable":{"default":false,"type":"boolean","markdownDescription":"Enables the use of rustfmt's unstable range formatting command for the\n`textDocument\/rangeFormatting` request. The rustfmt option is unstable and only\navailable on a nightly build."},"rust-analyzer.lens.debug.enable":{"default":true,"type":"boolean","markdownDescription":"Whether to show `Debug` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set."},"rust-analyzer.semanticHighlighting.doc.comment.inject.enable":{"default":true,"type":"boolean","markdownDescription":"Inject additional highlighting into doc comments.\n\nWhen enabled, rust-analyzer will highlight rust source in doc comments as well as intra\ndoc links."},"rust-analyzer.lens.enable":{"default":true,"type":"boolean","markdownDescription":"Whether to show CodeLens in Rust files."},"rust-analyzer.semanticHighlighting.nonStandardTokens":{"default":true,"type":"boolean","markdownDescription":"Whether the server is allowed to emit non-standard tokens and modifiers."},"rust-analyzer.lens.forceCustomCommands":{"default":true,"type":"boolean","markdownDescription":"Internal config: use custom client-side commands even when the\nclient doesn't set the corresponding capability."},"rust-analyzer.semanticHighlighting.operator.enable":{"default":true,"type":"boolean","markdownDescription":"Use semantic tokens for operators.\n\nWhen disabled, rust-analyzer will emit semantic tokens only for operator tokens when\nthey are tagged with modifiers."},"rust-analyzer.lens.implementations.enable":{"default":true,"type":"boolean","markdownDescription":"Whether to show `Implementations` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set."},"rust-analyzer.semanticHighlighting.operator.specialization.enable":{"default":false,"type":"boolean","markdownDescription":"Use specialized semantic tokens for operators.\n\nWhen enabled, rust-analyzer will emit special token types for operator tokens instead\nof the generic `operator` token type."},"rust-analyzer.lens.location":{"enum":["above_name","above_whole_item"],"enumDescriptions":["Render annotations above the name of the item.","Render annotations above the whole item, including documentation comments and attributes."],"default":"above_name","type":"string","markdownDescription":"Where to render annotations."},"rust-analyzer.semanticHighlighting.punctuation.enable":{"default":false,"type":"boolean","markdownDescription":"Use semantic tokens for punctuation.\n\nWhen disabled, rust-analyzer will emit semantic tokens only for punctuation tokens when\nthey are tagged with modifiers or have a special role."},"rust-analyzer.semanticHighlighting.punctuation.separate.macro.bang":{"default":false,"type":"boolean","markdownDescription":"When enabled, rust-analyzer will emit a punctuation semantic token for the `!` of macro\ncalls."},"rust-analyzer.semanticHighlighting.punctuation.specialization.enable":{"default":false,"type":"boolean","markdownDescription":"Use specialized semantic tokens for punctuation.\n\nWhen enabled, rust-analyzer will emit special token types for punctuation tokens instead\nof the generic `punctuation` token type."},"rust-analyzer.lens.references.adt.enable":{"default":false,"type":"boolean","markdownDescription":"Whether to show `References` lens for Struct, Enum, and Union.\nOnly applies when `#rust-analyzer.lens.enable#` is set."},"rust-analyzer.semanticHighlighting.strings.enable":{"default":true,"type":"boolean","markdownDescription":"Use semantic tokens for strings.\n\nIn some editors (e.g. vscode) semantic tokens override other highlighting grammars.\nBy disabling semantic tokens for strings, other grammars can be used to highlight\ntheir contents."},"rust-analyzer.lens.references.enumVariant.enable":{"default":false,"type":"boolean","markdownDescription":"Whether to show `References` lens for Enum Variants.\nOnly applies when `#rust-analyzer.lens.enable#` is set."},"rust-analyzer.signatureInfo.detail":{"enum":["full","parameters"],"enumDescriptions":["Show the entire signature.","Show only the parameters."],"default":"full","type":"string","markdownDescription":"Show full signature of the callable. Only shows parameters if disabled."},"rust-analyzer.lens.references.method.enable":{"default":false,"type":"boolean","markdownDescription":"Whether to show `Method References` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set."},"rust-analyzer.lens.references.trait.enable":{"default":false,"type":"boolean","markdownDescription":"Whether to show `References` lens for Trait.\nOnly applies when `#rust-analyzer.lens.enable#` is set."},"rust-analyzer.signatureInfo.documentation.enable":{"default":true,"type":"boolean","markdownDescription":"Show documentation."},"rust-analyzer.lens.run.enable":{"default":true,"type":"boolean","markdownDescription":"Whether to show `Run` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set."},"rust-analyzer.typing.autoClosingAngleBrackets.enable":{"default":false,"type":"boolean","markdownDescription":"Whether to insert closing angle brackets when typing an opening angle bracket of a generic argument list."},"rust-analyzer.linkedProjects":{"markdownDescription":"Disable project auto-discovery in favor of explicitly specified set\nof projects.\n\nElements must be paths pointing to `Cargo.toml`,\n`rust-project.json`, or JSON objects in `rust-project.json` format.","default":[],"type":"array","items":{"type":["string","object"]}},"rust-analyzer.workspace.symbol.search.kind":{"enum":["only_types","all_symbols"],"enumDescriptions":["Search for types only.","Search for all symbols kinds."],"default":"only_types","type":"string","markdownDescription":"Workspace symbol search kind."},"rust-analyzer.lru.capacity":{"markdownDescription":"Number of syntax trees rust-analyzer keeps in memory. Defaults to 128.","default":null,"type":["null","integer"],"minimum":0},"rust-analyzer.lru.query.capacities":{"default":{},"type":"object","markdownDescription":"Sets the LRU capacity of the specified queries."},"rust-analyzer.files.excludeDirs":{"markdownDescription":"These directories will be ignored by rust-analyzer. They are\nrelative to the workspace root, and globs are not supported. You may\nalso need to add the folders to Code's `files.watcherExclude`.","default":[],"type":"array","items":{"type":"string"}},"rust-analyzer.workspace.symbol.search.limit":{"markdownDescription":"Limits the number of items returned from a workspace symbol search (Defaults to 128).\nSome clients like vs-code issue new searches on result filtering and don't require all results to be returned in the initial search.\nOther clients requires all results upfront and might require a higher limit.","default":128,"type":"integer","minimum":0},"rust-analyzer.files.watcher":{"enum":["client","server"],"enumDescriptions":["Use the client (editor) to watch files for changes","Use server-side file watching"],"default":"client","type":"string","markdownDescription":"Controls file watching implementation."},"rust-analyzer.workspace.symbol.search.scope":{"enum":["workspace","workspace_and_dependencies"],"enumDescriptions":["Search in current workspace only.","Search in current workspace and dependencies."],"default":"workspace","type":"string","markdownDescription":"Workspace symbol search scope."},"rust-analyzer.rustc.source":{"default":null,"type":["null","string"],"markdownDescription":"Path to the Cargo.toml of the rust compiler workspace, for usage in rustc_private\nprojects, or \"discover\" to try to automatically find it if the `rustc-dev` component\nis installed.\n\nAny project which uses rust-analyzer with the rustcPrivate\ncrates must set `[package.metadata.rust-analyzer] rustc_private=true` to use it.\n\nThis option does not take effect until rust-analyzer is restarted."},"rust-analyzer.runnables.extraArgs":{"markdownDescription":"Additional arguments to be passed to cargo for runnables such as\ntests or binaries. For example, it may be `--release`.","default":[],"type":"array","items":{"type":"string"}},"rust-analyzer.highlightRelated.breakPoints.enable":{"default":true,"type":"boolean","markdownDescription":"Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords."},"rust-analyzer.runnables.command":{"default":null,"type":["null","string"],"markdownDescription":"Command to be executed instead of 'cargo' for runnables."},"rust-analyzer.highlightRelated.closureCaptures.enable":{"default":true,"type":"boolean","markdownDescription":"Enables highlighting of all captures of a closure while the cursor is on the `|` or move keyword of a closure."},"rust-analyzer.procMacro.server":{"default":null,"type":["null","string"],"markdownDescription":"Internal config, path to proc-macro server executable."},"rust-analyzer.highlightRelated.exitPoints.enable":{"default":true,"type":"boolean","markdownDescription":"Enables highlighting of all exit points while the cursor is on any `return`, `?`, `fn`, or return type arrow (`->`)."},"rust-analyzer.procMacro.ignored":{"default":{},"type":"object","markdownDescription":"These proc-macros will be ignored when trying to expand them.\n\nThis config takes a map of crate names with the exported proc-macro names to ignore as values."},"rust-analyzer.highlightRelated.references.enable":{"default":true,"type":"boolean","markdownDescription":"Enables highlighting of related references while the cursor is on any identifier."},"rust-analyzer.procMacro.enable":{"default":true,"type":"boolean","markdownDescription":"Enable support for procedural macros, implies `#rust-analyzer.cargo.buildScripts.enable#`."},"rust-analyzer.highlightRelated.yieldPoints.enable":{"default":true,"type":"boolean","markdownDescription":"Enables highlighting of all break points for a loop or block context while the cursor is on any `async` or `await` keywords."},"rust-analyzer.procMacro.attributes.enable":{"default":true,"type":"boolean","markdownDescription":"Expand attribute macros. Requires `#rust-analyzer.procMacro.enable#` to be set."},"rust-analyzer.hover.actions.debug.enable":{"default":true,"type":"boolean","markdownDescription":"Whether to show `Debug` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set."},"rust-analyzer.numThreads":{"markdownDescription":"How many worker threads in the main loop. The default `null` means to pick automatically.","default":null,"type":["null","integer"],"minimum":0},"rust-analyzer.hover.actions.enable":{"default":true,"type":"boolean","markdownDescription":"Whether to show HoverActions in Rust files."},"rust-analyzer.notifications.cargoTomlNotFound":{"default":true,"type":"boolean","markdownDescription":"Whether to show `can't find Cargo.toml` error message."},"rust-analyzer.hover.actions.gotoTypeDef.enable":{"default":true,"type":"boolean","markdownDescription":"Whether to show `Go to Type Definition` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set."},"rust-analyzer.completion.autoself.enable":{"default":true,"type":"boolean","markdownDescription":"Toggles the additional completions that automatically show method calls and field accesses\nwith `self` prefixed to them when inside a method."},"rust-analyzer.hover.actions.implementations.enable":{"default":true,"type":"boolean","markdownDescription":"Whether to show `Implementations` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set."},"rust-analyzer.completion.callable.snippets":{"enum":["fill_arguments","add_parentheses","none"],"enumDescriptions":["Add call parentheses and pre-fill arguments.","Add call parentheses.","Do no snippet completions for callables."],"default":"fill_arguments","type":"string","markdownDescription":"Whether to add parenthesis and argument snippets when completing function."},"rust-analyzer.hover.actions.references.enable":{"default":false,"type":"boolean","markdownDescription":"Whether to show `References` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set."},"rust-analyzer.check.targets":{"anyOf":[{"type":"null"},{"type":"string"},{"type":"array","items":{"type":"string"}}],"default":null,"markdownDescription":"Check for specific targets. Defaults to `#rust-analyzer.cargo.target#` if empty.\n\nCan be a single target, e.g. `\"x86_64-unknown-linux-gnu\"` or a list of targets, e.g.\n`[\"aarch64-apple-darwin\", \"x86_64-apple-darwin\"]`.\n\nAliased as `\"checkOnSave.targets\"`."},"rust-analyzer.hover.actions.run.enable":{"default":true,"type":"boolean","markdownDescription":"Whether to show `Run` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set."},"rust-analyzer.check.command":{"default":"check","type":"string","markdownDescription":"Cargo command to use for `cargo check`."},"rust-analyzer.hover.documentation.enable":{"default":true,"type":"boolean","markdownDescription":"Whether to show documentation on hover."},"rust-analyzer.cargo.sysroot":{"default":"discover","type":["null","string"],"markdownDescription":"Relative path to the sysroot, or \"discover\" to try to automatically find it via\n\"rustc --print sysroot\".\n\nUnsetting this disables sysroot loading.\n\nThis option does not take effect until rust-analyzer is restarted."},"rust-analyzer.hover.documentation.keywords.enable":{"default":true,"type":"boolean","markdownDescription":"Whether to show keyword hover popups. Only applies when\n`#rust-analyzer.hover.documentation.enable#` is set."},"rust-analyzer.check.invocationLocation":{"enum":["workspace","root"],"enumDescriptions":["The command will be executed in the corresponding workspace root.","The command will be executed in the project root."],"default":"workspace","type":"string","markdownDescription":"Specifies the working directory for running checks.\n- \"workspace\": run checks for workspaces in the corresponding workspaces' root directories.\n    This falls back to \"root\" if `#rust-analyzer.cargo.check.invocationStrategy#` is set to `once`.\n- \"root\": run checks in the project's root directory.\nThis config only has an effect when `#rust-analyzer.cargo.check.overrideCommand#`\nis set."},"rust-analyzer.completion.limit":{"markdownDescription":"Maximum number of completions to return. If `None`, the limit is infinite.","default":null,"type":["null","integer"],"minimum":0},"rust-analyzer.diagnostics.warningsAsInfo":{"markdownDescription":"List of warnings that should be displayed with info severity.\n\nThe warnings will be indicated by a blue squiggly underline in code\nand a blue icon in the `Problems Panel`.","default":[],"type":"array","items":{"type":"string"}},"rust-analyzer.inlayHints.expressionAdjustmentHints.enable":{"enum":["always","never","reborrow"],"enumDescriptions":["Always show all adjustment hints.","Never show adjustment hints.","Only show auto borrow and dereference adjustment hints."],"default":"never","type":"string","markdownDescription":"Whether to show inlay hints for type adjustments."},"rust-analyzer.diagnostics.warningsAsHint":{"markdownDescription":"List of warnings that should be displayed with hint severity.\n\nThe warnings will be indicated by faded text or three dots in code\nand will not show up in the `Problems Panel`.","default":[],"type":"array","items":{"type":"string"}},"rust-analyzer.diagnostics.remapPrefix":{"default":{},"type":"object","markdownDescription":"Map of prefixes to be substituted when parsing diagnostic file paths.\nThis should be the reverse mapping of what is passed to `rustc` as `--remap-path-prefix`."},"rust-analyzer.diagnostics.experimental.enable":{"default":false,"type":"boolean","markdownDescription":"Whether to show experimental rust-analyzer diagnostics that might\nhave more false positives than usual."},"rust-analyzer.diagnostics.enable":{"default":true,"type":"boolean","markdownDescription":"Whether to show native rust-analyzer diagnostics."},"rust-analyzer.inlayHints.expressionAdjustmentHints.hideOutsideUnsafe":{"default":false,"type":"boolean","markdownDescription":"Whether to hide inlay hints for type adjustments outside of `unsafe` blocks."},"rust-analyzer.diagnostics.disabled":{"items":{"type":"string"},"uniqueItems":true,"markdownDescription":"List of rust-analyzer diagnostics to disable.","type":"array","default":[]},"rust-analyzer.inlayHints.expressionAdjustmentHints.mode":{"enum":["prefix","postfix","prefer_prefix","prefer_postfix"],"enumDescriptions":["Always show adjustment hints as prefix (`*expr`).","Always show adjustment hints as postfix (`expr.*`).","Show prefix or postfix depending on which uses less parenthesis, preferring prefix.","Show prefix or postfix depending on which uses less parenthesis, preferring postfix."],"default":"prefix","type":"string","markdownDescription":"Whether to show inlay hints as postfix ops (`.*` instead of `*`, etc)."}},"type":"object","title":"rust-analyzer"}